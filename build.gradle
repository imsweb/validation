import com.vanniktech.maven.publish.*

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco'
    id 'com.vanniktech.maven.publish' version '0.32.0' // publish to Maven Central
    id 'com.github.ben-manes.versions' version '0.52.0' // check for out-of-date dependencies (run 'dependencyUpdates' manually)
    id 'com.github.spotbugs' version '6.1.11' // spotbugs code analysis
    id 'org.sonatype.gradle.plugins.scan' version '3.1.1' // scan for vulnerabilities
}

group = 'com.imsweb'
version = file('VERSION').text.trim()
description = 'This framework allows edits to be defined in Groovy and to be executed on various data types.'

println "Starting build using JDK ${Runtime.version().feature()}"

repositories {
    mavenCentral()
}

dependencies {
    api 'com.imsweb:staging-client-java:11.4.0'
    api 'org.apache.groovy:groovy:4.0.26'
    api 'com.thoughtworks.xstream:xstream:1.4.21'

    implementation 'commons-codec:commons-codec:1.18.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'commons-io:commons-io:2.19.0'
    testImplementation 'com.imsweb:layout:6.2'
    testImplementation 'com.imsweb:staging-client-java-cs:11.4.0'
    testImplementation 'com.imsweb:staging-client-java-eod-public:11.4.0'
    testImplementation 'com.imsweb:staging-client-java-tnm:11.4.0'
    testImplementation('com.imsweb:validation-edits-seer:025-06') { exclude module: 'validation' }
    testImplementation('com.imsweb:validation-edits-naaccr-translated:022-01') { exclude module: 'validation' }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    options.addBooleanOption('html5', true)
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': 'Information Management Services Inc.',
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Automatic-Module-Name': 'com.imsweb.validation'
        )
    }
}

// checkstyle plugin settings
checkstyle {
    ignoreFailures = false
    configFile = file('config/checkstyle/checkstyle.xml')
    configProperties = ['suppressionFile': file('config/checkstyle/checkstyle-exclude.xml')]
}

// jacoco plugin settings
jacocoTestReport {
    reports {
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

// spotbugs plugin settings
spotbugs {
    ignoreFailures = false
    excludeFilter.set(file('config/spotbugs/spotbugs-exclude.xml'))
}

// use this task to generate the regex parser
tasks.register('generateJavaContextParser', JavaExec) {
    group = 'context'
    classpath = files('config/jflex-1.4.2/lib/JFlex.jar')
    args = ['--nobak', '-d', 'src/main/java/com/imsweb/validation/internal/context/', 'config/java-context.flex']
}


// Nexus vulnerability scan (https://github.com/sonatype-nexus-community/scan-gradle-plugin)
ossIndexAudit {
    outputFormat = 'DEPENDENCY_GRAPH'
    printBanner = false

    excludeVulnerabilityIds = [
            'CVE-2022-42003',
            'CVE-2022-42004',
            'sonatype-2022-6438'
    ]
}

if (project.hasProperty('branch_name') && (project.ext.get('branch_name') == 'master' || project.ext.get('branch_name') == 'main'))
    check.dependsOn 'ossIndexAudit'

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

// needed to deploy to Maven Central Portal
mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, true)
    signAllPublications()

    pom {
        name = 'Validation Framework'
        description = 'This framework allows edits to be defined in Groovy and to be executed on various data types.'
        url = 'https://github.com/imsweb/validation'
        inceptionYear = '2015'

        licenses {
            license {
                name = 'A modified BSD License (BSD)'
                url = 'https://github.com/imsweb/validation/blob/master/LICENSE'
                distribution = 'repo'
            }
        }

        developers {
            developer {
                id = 'depryf'
                name = 'Fabian Depry'
                email = 'depryf@imsweb.com'
            }
        }

        scm {
            url = 'https://github.com/imsweb/validation'
            connection = 'scm:https://github.com/imsweb/validation.git'
            developerConnection = 'scm:git@github.com:imsweb/validation.git'
        }
    }
}

// Gradle wrapper, this allows to build the project without having to install Gradle!
wrapper {
    gradleVersion = '8.14'
    distributionType = Wrapper.DistributionType.ALL
}
