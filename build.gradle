import java.time.Duration

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.12'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0' // publish to Maven Central
    id 'com.github.ben-manes.versions' version '0.43.0' // check for out-of-date dependencies (run manually)
    id 'org.sonatype.gradle.plugins.scan' version '2.4.1' // scan for vulnerabilities
    id "org.sonarqube" version "3.3" // sonarQube analysis
}

group = 'com.imsweb'
version = file('VERSION').text.trim()
description = 'This framework allows edits to be defined in Groovy and to be executed on various data types.'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

println "Starting build using JDK ${Runtime.version().feature()}"

repositories {
    mavenCentral()
}

dependencies {
    api 'com.imsweb:staging-client-java:6.3.0'
    api 'org.codehaus.groovy:groovy:3.0.10:indy'
    api 'com.thoughtworks.xstream:xstream:1.4.19'

    implementation 'commons-codec:commons-codec:1.15'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'com.imsweb:layout:5.0'
    testImplementation 'com.imsweb:staging-algorithm-cs:02.05.50.10'
    testImplementation 'com.imsweb:staging-algorithm-tnm:1.9.9'
    testImplementation 'com.imsweb:staging-algorithm-eod-public:2.1.2'
    testImplementation 'com.imsweb:validation-edits-seer:022-10'
    testImplementation 'com.imsweb:validation-edits-naaccr-translated:015-01'
}

// enforce UTF-8, display the compilation warnings
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

// the Javadoc was made way too strict in Java 8 and it's not worth the time fixing everything!
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// generate javadoc and sources (required by Nexus)
java {
    withJavadocJar()
    withSourcesJar()
}

// customize the manifest
jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': version,
                'Implementation-Vendor': 'Information Management Services Inc.',
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Automatic-Module-Name': 'com.imsweb.validation'
        )
    }
}

// checkstyle plugin settings
checkstyle {
    ignoreFailures = false
    configFile = file('config/checkstyle/checkstyle.xml')
    configProperties = ['suppressionFile': file('config/checkstyle/checkstyle-exclude.xml')]
}

// jacoco plugin settings
jacocoTestReport {
    reports {
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

// spotbugs plugin settings
spotbugs {
    ignoreFailures = false
    excludeFilter = file('config/spotbugs/spotbugs-exclude.xml')
}

spotbugsMain {
    reports {
        xml {
            enabled = true
        }
    }
}

spotbugsTest {
    reports {
        xml {
            enabled = true
        }
    }
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Library-Validation'
        property 'sonar.projectKey', 'Library---Validation'
        property 'sonar.organization', 'imsweb'
        property 'sonar.host.url', project.ext.get('sonar.host.url')
        property 'sonar.exclusions', '**/lab/*'
        property 'sonar.coverage.exclusions', '**/lab/*'
    }
}

if (!project.hasProperty('branch_name') || (project.ext.get('branch_name') != 'master' && project.ext.get('branch_name') != 'main'))
    gradle.startParameter.excludedTaskNames += 'sonarqube'

// use this task to generate the regex parser
task generateJavaContextParser {
    doLast {
        javaexec {
            main = '-jar'
            args = ['config/jflex-1.4.2/lib/JFlex.jar',
                    '--nobak',
                    '-d',
                    'src/main/java/com/imsweb/validation/internal/context/',
                    'config/java-context.flex']
        }
    }
}

// Nexus vulnerability scan (https://github.com/sonatype-nexus-community/scan-gradle-plugin)
ossIndexAudit {
    proxyConfiguration {
        protocol = 'http'
        host = 'webproxy-btp.imsweb.com'
        port = 8080
    }

    printBanner = false

    excludeCoordinates = [
            'com.thoughtworks.xstream:xstream:1.4.19' // developer doesn't agree and won't fix
    ]

    excludeVulnerabilityIds = [
            'CVE-2022-42004'  // jackson-databind 2.13.2.2 - need to upgrade staging to fix it, but I can't upgrade yet...
    ]
}
if (project.hasProperty('branch_name') && (project.ext.get('branch_name') == 'master' || project.ext.get('branch_name') == 'main'))
    check.dependsOn 'ossIndexAudit'

// needed to deploy to Maven Central
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'validation'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Validation Framework'
                description = 'This framework allows edits to be defined in Groovy and to be executed on various data types.'
                url = 'https://github.com/imsweb/validation'
                inceptionYear = '2015'

                licenses {
                    license {
                        name = 'A modified BSD License (BSD)'
                        url = 'https://github.com/imsweb/validation/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'depryf'
                        name = 'Fabian Depry'
                        email = 'depryf@imsweb.com'
                    }
                }

                scm {
                    url = 'https://github.com/imsweb/validation'
                    connection = 'scm:https://github.com/imsweb/validation.git'
                    developerConnection = 'scm:git@github.com:imsweb/validation.git'
                }
            }
        }
    }
}

// setup JAR signing
signing {
    def signingKey = project.findProperty('signing.armored.key') ?: ''
    def signingPassword = project.findProperty('signing.armored.password') ?: ''

    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

// needed to release on maven central
nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '63e5ddd3ab0d16'

            username = project.findProperty("nexusUsername")
            password = project.findProperty("nexusPassword")
        }
    }

    clientTimeout = Duration.ofSeconds(300)
    connectTimeout = Duration.ofSeconds(60)

    transitionCheckOptions {
        maxRetries.set(50)
        delayBetween.set(Duration.ofMillis(5000))
    }
}

// don't try to release a snapshot to a non-snapshot repository, that won't work anyway
if (version.endsWith('-SNAPSHOT')) {
    gradle.startParameter.excludedTaskNames += 'signMavenJavaPublication'
    gradle.startParameter.excludedTaskNames += 'closeAndReleaseSonatypeStagingRepository'
}

// Gradle wrapper, this allows to build the project without having to install Gradle!
wrapper {
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}


